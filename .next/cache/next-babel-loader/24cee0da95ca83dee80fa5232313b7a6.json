{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { makeAutoObservable } from \"mobx\";\nimport { getCookie } from 'react-use-cookie';\nimport { setCookie } from 'react-use-cookie';\n\nvar PostsStore = /*#__PURE__*/function () {\n  function PostsStore() {\n    _classCallCheck(this, PostsStore);\n\n    _defineProperty(this, \"posts\", []);\n\n    _defineProperty(this, \"havePosts\", true);\n\n    _defineProperty(this, \"page\", 1);\n\n    _defineProperty(this, \"load\", false);\n\n    _defineProperty(this, \"likedPosts\", []);\n\n    makeAutoObservable(this);\n  }\n\n  _createClass(PostsStore, [{\n    key: \"togleLike\",\n    value: function togleLike(post) {\n      this.posts = this.posts.map(function (postI) {\n        if (postI._id === post._id) {\n          postI.isLiked = !postI.isLiked;\n        }\n\n        return postI;\n      });\n      var likedLast = getCookie('likedPosts') || \"[]\";\n      console.log(likedLast);\n      var likedJson = JSON.parse(likedLast);\n      var currentLiked = [].concat(_toConsumableArray(likedJson), [post]);\n      console.log(currentLiked);\n      setCookie('likedPosts', JSON.stringify()); // console.log(JSON.parse(posts));\n    }\n  }, {\n    key: \"loadPosts\",\n    value: function () {\n      var _loadPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, json, likedPosts, concatPosts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.load && this.havePosts)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                this.load = true;\n                _context.next = 4;\n                return fetch('/api/news/news', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json;charset=utf-8'\n                  },\n                  body: JSON.stringify({\n                    page: this.page\n                  })\n                });\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                json = _context.sent;\n\n                if (json.length) {\n                  _context.next = 12;\n                  break;\n                }\n\n                this.havePosts = false;\n                this.load = false;\n                return _context.abrupt(\"return\", 0);\n\n              case 12:\n                ;\n                likedPosts = new Set();\n                json = json.map(function (news) {\n                  return _objectSpread(_objectSpread({}, news), {}, {\n                    isLiked: likedPosts.has(news._id)\n                  });\n                });\n                concatPosts = this.posts.concat(json);\n                this.posts = _toConsumableArray(new Set(concatPosts.map(JSON.stringify))).map(JSON.parse);\n                this.page++;\n                this.load = false;\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadPosts() {\n        return _loadPosts.apply(this, arguments);\n      }\n\n      return loadPosts;\n    }()\n  }]);\n\n  return PostsStore;\n}();\n\nvar postsStore = new PostsStore();\nexport default postsStore;","map":null,"metadata":{},"sourceType":"module"}