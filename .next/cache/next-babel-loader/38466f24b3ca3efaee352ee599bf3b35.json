{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { makeAutoObservable } from \"mobx\";\nimport { getCookie } from 'react-use-cookie';\nimport { setCookie } from 'react-use-cookie';\n\nvar PostsStore = /*#__PURE__*/function () {\n  function PostsStore() {\n    _classCallCheck(this, PostsStore);\n\n    _defineProperty(this, \"posts\", []);\n\n    _defineProperty(this, \"havePosts\", true);\n\n    _defineProperty(this, \"page\", 1);\n\n    _defineProperty(this, \"load\", false);\n\n    _defineProperty(this, \"likedPosts\", []);\n\n    makeAutoObservable(this);\n  }\n\n  _createClass(PostsStore, [{\n    key: \"togleLike\",\n    value: function togleLike(post) {\n      this.posts = this.posts.map(function (postI) {\n        if (postI._id === post._id) {\n          postI.isLiked = !postI.isLiked;\n        }\n\n        return postI;\n      });\n      var likedLast = getCookie('likedPosts');\n      likedLast = likedLast ? likedLast : [];\n      var likedJson = JSON.parse(likedLast);\n      var currentLiked = [].concat(_toConsumableArray(likedJson), [post]);\n      console.log(currentLiked);\n      setCookie('likedPosts', JSON.stringify()); // console.log(JSON.parse(posts));\n    }\n  }, {\n    key: \"loadPosts\",\n    value: function () {\n      var _loadPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response, json, likedPosts, concatPosts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.load && this.havePosts)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                this.load = true;\n                _context.next = 4;\n                return fetch('/api/news/news', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json;charset=utf-8'\n                  },\n                  body: JSON.stringify({\n                    page: this.page\n                  })\n                });\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                json = _context.sent;\n\n                if (json.length) {\n                  _context.next = 12;\n                  break;\n                }\n\n                this.havePosts = false;\n                this.load = false;\n                return _context.abrupt(\"return\", 0);\n\n              case 12:\n                ;\n                likedPosts = new Set();\n                json = json.map(function (news) {\n                  return _objectSpread(_objectSpread({}, news), {}, {\n                    isLiked: likedPosts.has(news._id)\n                  });\n                });\n                concatPosts = this.posts.concat(json);\n                this.posts = _toConsumableArray(new Set(concatPosts.map(JSON.stringify))).map(JSON.parse);\n                this.page++;\n                this.load = false;\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadPosts() {\n        return _loadPosts.apply(this, arguments);\n      }\n\n      return loadPosts;\n    }()\n  }]);\n\n  return PostsStore;\n}();\n\nvar postsStore = new PostsStore();\nexport default postsStore;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Рабочий стол/news/news/stores/posts-store.js"],"names":["makeAutoObservable","getCookie","setCookie","PostsStore","post","posts","map","postI","_id","isLiked","likedLast","likedJson","JSON","parse","currentLiked","console","log","stringify","load","havePosts","fetch","method","headers","body","page","response","json","length","likedPosts","Set","news","has","concatPosts","concat","postsStore"],"mappings":";;;;;;;;;;;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;IACMC,U;AAMJ,wBAAc;AAAA;;AAAA,mCALN,EAKM;;AAAA,uCAJF,IAIE;;AAAA,kCAHP,CAGO;;AAAA,kCAFP,KAEO;;AAAA,wCADA,EACA;;AACZH,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;;;8BACSI,I,EAAK;AACb,WAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,GAAX,CAAe,UAAAC,KAAK,EAAI;AACnC,YAAGA,KAAK,CAACC,GAAN,KAAcJ,IAAI,CAACI,GAAtB,EAA0B;AACxBD,UAAAA,KAAK,CAACE,OAAN,GAAgB,CAACF,KAAK,CAACE,OAAvB;AACD;;AACD,eAAOF,KAAP;AACD,OALY,CAAb;AAMA,UAAIG,SAAS,GAAGT,SAAS,CAAC,YAAD,CAAzB;AACAS,MAAAA,SAAS,GAAIA,SAAS,GAAGA,SAAH,GAAe,EAArC;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,SAAX,CAAlB;AACA,UAAMI,YAAY,gCAAOH,SAAP,IAAkBP,IAAlB,EAAlB;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAZ,MAAAA,SAAS,CAAC,YAAD,EAAeU,IAAI,CAACK,SAAL,EAAf,CAAT,CAZa,CAab;AAED;;;;;;;;;;sBAEK,CAAC,KAAKC,IAAN,IAAc,KAAKC,S;;;;;AACrB,qBAAKD,IAAL,GAAY,IAAZ;;uBACuBE,KAAK,CAAC,gBAAD,EAAkB;AAC1CC,kBAAAA,MAAM,EAAE,MADkC;AAE1CC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT,mBAFiC;AAK1CC,kBAAAA,IAAI,EAAEX,IAAI,CAACK,SAAL,CAAe;AACjBO,oBAAAA,IAAI,EAAE,KAAKA;AADM,mBAAf;AALoC,iBAAlB,C;;;AAAtBC,gBAAAA,Q;;uBASWA,QAAQ,CAACC,IAAT,E;;;AAAbA,gBAAAA,I;;oBACAA,IAAI,CAACC,M;;;;;AACP,qBAAKR,SAAL,GAAiB,KAAjB;AACA,qBAAKD,IAAL,GAAY,KAAZ;iDACO,C;;;AACR;AACGU,gBAAAA,U,GAAa,IAAIC,GAAJ,E;AACjBH,gBAAAA,IAAI,GAAGA,IAAI,CAACpB,GAAL,CAAS,UAAAwB,IAAI;AAAA,yDAASA,IAAT;AAAerB,oBAAAA,OAAO,EAAEmB,UAAU,CAACG,GAAX,CAAeD,IAAI,CAACtB,GAApB;AAAxB;AAAA,iBAAb,CAAP;AACIwB,gBAAAA,W,GAAc,KAAK3B,KAAL,CAAW4B,MAAX,CAAkBP,IAAlB,C;AAClB,qBAAKrB,KAAL,GAAa,mBAAI,IAAIwB,GAAJ,CAAQG,WAAW,CAAC1B,GAAZ,CAAgBM,IAAI,CAACK,SAArB,CAAR,CAAJ,EAA8CX,GAA9C,CAAkDM,IAAI,CAACC,KAAvD,CAAb;AACA,qBAAKW,IAAL;AACA,qBAAKN,IAAL,GAAY,KAAZ;;;;;;;;;;;;;;;;;;;;;AAIN,IAAMgB,UAAU,GAAG,IAAI/B,UAAJ,EAAnB;AACA,eAAe+B,UAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\"\r\nimport { getCookie } from 'react-use-cookie';\r\nimport { setCookie } from 'react-use-cookie';\r\nclass PostsStore {\r\n  posts = [];\r\n  havePosts = true;\r\n  page = 1;\r\n  load = false;\r\n  likedPosts  = [];\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n  togleLike(post){\r\n    this.posts = this.posts.map(postI => {\r\n      if(postI._id === post._id){\r\n        postI.isLiked = !postI.isLiked;\r\n      }\r\n      return postI;\r\n    });\r\n    let likedLast = getCookie('likedPosts');\r\n    likedLast = (likedLast ? likedLast : []);\r\n    const likedJson = JSON.parse(likedLast);\r\n    const currentLiked = [...likedJson, post];\r\n    console.log(currentLiked);\r\n    setCookie('likedPosts', JSON.stringify());\r\n    // console.log(JSON.parse(posts));\r\n\r\n  }\r\n  async loadPosts(){\r\n    if((!this.load && this.havePosts)){\r\n      this.load = true;\r\n      const response = await fetch('/api/news/news',{\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n          },\r\n          body: JSON.stringify({\r\n              page: this.page\r\n          })\r\n      });\r\n      let json = await response.json();\r\n      if(!json.length) {\r\n        this.havePosts = false;\r\n        this.load = false;\r\n        return 0;\r\n      };\r\n      let likedPosts = new Set();\r\n      json = json.map(news => ({...news, isLiked: likedPosts.has(news._id)}));\r\n      let concatPosts = this.posts.concat(json);\r\n      this.posts = [...new Set(concatPosts.map(JSON.stringify))].map(JSON.parse);\r\n      this.page++;\r\n      this.load = false;\r\n    }\r\n  }\r\n}\r\nconst postsStore = new PostsStore();\r\nexport default postsStore;"]},"metadata":{},"sourceType":"module"}