{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeAutoObservable } from \"mobx\";\nimport { getCookie } from 'react-use-cookie';\nimport { setCookie } from 'react-use-cookie';\n\nclass PostsStore {\n  constructor() {\n    _defineProperty(this, \"posts\", []);\n\n    _defineProperty(this, \"havePosts\", true);\n\n    _defineProperty(this, \"page\", 1);\n\n    _defineProperty(this, \"load\", false);\n\n    _defineProperty(this, \"likedPosts\", []);\n\n    makeAutoObservable(this);\n  }\n\n  togleLike(post) {\n    this.posts = this.posts.map(postI => {\n      if (postI._id === post._id) {\n        postI.isLiked = !postI.isLiked;\n      }\n\n      return postI;\n    });\n    let likedLast = getCookie('likedPosts');\n    likedLast = likedLast ? likedLast : \"[]\";\n    console.log(likedLast);\n    const likedJson = JSON.parse(likedLast);\n    const currentLiked = [...likedJson, post];\n    console.log(currentLiked);\n    setCookie('likedPosts', JSON.stringify()); // console.log(JSON.parse(posts));\n  }\n\n  async loadPosts() {\n    if (!this.load && this.havePosts) {\n      this.load = true;\n      const response = await fetch('/api/news/news', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          page: this.page\n        })\n      });\n      let json = await response.json();\n\n      if (!json.length) {\n        this.havePosts = false;\n        this.load = false;\n        return 0;\n      }\n\n      ;\n      let likedPosts = new Set();\n      json = json.map(news => _objectSpread(_objectSpread({}, news), {}, {\n        isLiked: likedPosts.has(news._id)\n      }));\n      let concatPosts = this.posts.concat(json);\n      this.posts = [...new Set(concatPosts.map(JSON.stringify))].map(JSON.parse);\n      this.page++;\n      this.load = false;\n    }\n  }\n\n}\n\nconst postsStore = new PostsStore();\nexport default postsStore;","map":{"version":3,"sources":["C:/Users/User/OneDrive/Рабочий стол/news/news/stores/posts-store.js"],"names":["makeAutoObservable","getCookie","setCookie","PostsStore","constructor","togleLike","post","posts","map","postI","_id","isLiked","likedLast","console","log","likedJson","JSON","parse","currentLiked","stringify","loadPosts","load","havePosts","response","fetch","method","headers","body","page","json","length","likedPosts","Set","news","has","concatPosts","concat","postsStore"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AACA,MAAMC,UAAN,CAAiB;AAMfC,EAAAA,WAAW,GAAG;AAAA,mCALN,EAKM;;AAAA,uCAJF,IAIE;;AAAA,kCAHP,CAGO;;AAAA,kCAFP,KAEO;;AAAA,wCADA,EACA;;AACZJ,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AACDK,EAAAA,SAAS,CAACC,IAAD,EAAM;AACb,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,GAAX,CAAeC,KAAK,IAAI;AACnC,UAAGA,KAAK,CAACC,GAAN,KAAcJ,IAAI,CAACI,GAAtB,EAA0B;AACxBD,QAAAA,KAAK,CAACE,OAAN,GAAgB,CAACF,KAAK,CAACE,OAAvB;AACD;;AACD,aAAOF,KAAP;AACD,KALY,CAAb;AAMA,QAAIG,SAAS,GAAGX,SAAS,CAAC,YAAD,CAAzB;AACAW,IAAAA,SAAS,GAAIA,SAAS,GAAGA,SAAH,GAAe,IAArC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,UAAMG,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAlB;AACA,UAAMM,YAAY,GAAG,CAAC,GAAGH,SAAJ,EAAeT,IAAf,CAArB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYI,YAAZ;AACAhB,IAAAA,SAAS,CAAC,YAAD,EAAec,IAAI,CAACG,SAAL,EAAf,CAAT,CAba,CAcb;AAED;;AACD,QAAMC,SAAN,GAAiB;AACf,QAAI,CAAC,KAAKC,IAAN,IAAc,KAAKC,SAAvB,EAAkC;AAChC,WAAKD,IAAL,GAAY,IAAZ;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAD,EAAkB;AAC1CC,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFiC;AAK1CC,QAAAA,IAAI,EAAEX,IAAI,CAACG,SAAL,CAAe;AACjBS,UAAAA,IAAI,EAAE,KAAKA;AADM,SAAf;AALoC,OAAlB,CAA5B;AASA,UAAIC,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAjB;;AACA,UAAG,CAACA,IAAI,CAACC,MAAT,EAAiB;AACf,aAAKR,SAAL,GAAiB,KAAjB;AACA,aAAKD,IAAL,GAAY,KAAZ;AACA,eAAO,CAAP;AACD;;AAAA;AACD,UAAIU,UAAU,GAAG,IAAIC,GAAJ,EAAjB;AACAH,MAAAA,IAAI,GAAGA,IAAI,CAACrB,GAAL,CAASyB,IAAI,oCAASA,IAAT;AAAetB,QAAAA,OAAO,EAAEoB,UAAU,CAACG,GAAX,CAAeD,IAAI,CAACvB,GAApB;AAAxB,QAAb,CAAP;AACA,UAAIyB,WAAW,GAAG,KAAK5B,KAAL,CAAW6B,MAAX,CAAkBP,IAAlB,CAAlB;AACA,WAAKtB,KAAL,GAAa,CAAC,GAAG,IAAIyB,GAAJ,CAAQG,WAAW,CAAC3B,GAAZ,CAAgBQ,IAAI,CAACG,SAArB,CAAR,CAAJ,EAA8CX,GAA9C,CAAkDQ,IAAI,CAACC,KAAvD,CAAb;AACA,WAAKW,IAAL;AACA,WAAKP,IAAL,GAAY,KAAZ;AACD;AACF;;AAnDc;;AAqDjB,MAAMgB,UAAU,GAAG,IAAIlC,UAAJ,EAAnB;AACA,eAAekC,UAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\"\r\nimport { getCookie } from 'react-use-cookie';\r\nimport { setCookie } from 'react-use-cookie';\r\nclass PostsStore {\r\n  posts = [];\r\n  havePosts = true;\r\n  page = 1;\r\n  load = false;\r\n  likedPosts  = [];\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n  togleLike(post){\r\n    this.posts = this.posts.map(postI => {\r\n      if(postI._id === post._id){\r\n        postI.isLiked = !postI.isLiked;\r\n      }\r\n      return postI;\r\n    });\r\n    let likedLast = getCookie('likedPosts');\r\n    likedLast = (likedLast ? likedLast : \"[]\");\r\n    console.log(likedLast);\r\n    const likedJson = JSON.parse(likedLast);\r\n    const currentLiked = [...likedJson, post];\r\n    console.log(currentLiked);\r\n    setCookie('likedPosts', JSON.stringify());\r\n    // console.log(JSON.parse(posts));\r\n\r\n  }\r\n  async loadPosts(){\r\n    if((!this.load && this.havePosts)){\r\n      this.load = true;\r\n      const response = await fetch('/api/news/news',{\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n          },\r\n          body: JSON.stringify({\r\n              page: this.page\r\n          })\r\n      });\r\n      let json = await response.json();\r\n      if(!json.length) {\r\n        this.havePosts = false;\r\n        this.load = false;\r\n        return 0;\r\n      };\r\n      let likedPosts = new Set();\r\n      json = json.map(news => ({...news, isLiked: likedPosts.has(news._id)}));\r\n      let concatPosts = this.posts.concat(json);\r\n      this.posts = [...new Set(concatPosts.map(JSON.stringify))].map(JSON.parse);\r\n      this.page++;\r\n      this.load = false;\r\n    }\r\n  }\r\n}\r\nconst postsStore = new PostsStore();\r\nexport default postsStore;"]},"metadata":{},"sourceType":"module"}