{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Container, Grid } from \"@material-ui/core\";\nimport NewsCard from \"./NewsCard\";\nimport { useInView } from 'react-intersection-observer';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useState } from \"react\";\nimport useCookie from 'react-use-cookie';\nimport { useStore } from \"mobx-store-provider\";\nimport { observer } from 'mobx-react';\n\nconst LikedNews = () => {\n  const {\n    postsStore\n  } = useStore();\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0\n  });\n  const [posts, setPosts] = useCookie('likedPosts');\n  const {\n    0: load,\n    1: setLoad\n  } = useState(false);\n  let page = 0;\n\n  const loadData = async () => {\n    if (posts) {\n      let cookiePosts = JSON.parse(posts);\n\n      if (page * 10 < cookiePosts.length) {\n        if (!load) {\n          setLoad(true);\n          const currentPosts = cookiePosts.slice(page * 10, page * 10 + 10);\n          const response = await fetch('/api/news/likedNews', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: JSON.stringify({\n              newsIdArray: currentPosts\n            })\n          });\n          let json = await response.json();\n          json = json.map(news => _objectSpread(_objectSpread({}, news), {}, {\n            isLiked: true\n          }));\n          json = [...new Set(json.map(JSON.stringify))].map(JSON.parse);\n          let globalPosts = json.concat(postsStore.posts);\n          globalPosts = [...new Set(globalPosts.map(JSON.stringify))].map(JSON.parse);\n          postsStore.posts = globalPosts;\n          page++;\n          setLoad(false);\n        }\n      }\n    }\n  };\n\n  if (inView) loadData();\n  return /*#__PURE__*/_jsxs(Container, {\n    children: [/*#__PURE__*/_jsx(Grid, {\n      spacing: 3,\n      container: true,\n      children: postsStore.posts.map(post => {\n        if (post.isLiked) {\n          return /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 12,\n            md: 3,\n            sm: 6,\n            children: /*#__PURE__*/_jsx(NewsCard, {\n              post: post\n            })\n          }, post.url);\n        }\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      ref: ref,\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        paddingTop: \"15px\"\n      },\n      children: load ? /*#__PURE__*/_jsx(CircularProgress, {}) : \"\"\n    })]\n  });\n};\n\nexport default observer(LikedNews);","map":null,"metadata":{},"sourceType":"module"}