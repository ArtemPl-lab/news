{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeAutoObservable } from \"mobx\";\n\nclass PostsStore {\n  constructor() {\n    _defineProperty(this, \"posts\", []);\n\n    _defineProperty(this, \"havePosts\", true);\n\n    _defineProperty(this, \"page\", 1);\n\n    _defineProperty(this, \"load\", false);\n\n    makeAutoObservable(this);\n  }\n\n  async loadPosts() {\n    if (!this.load && this.havePosts) {\n      this.load = true;\n      const response = await fetch('/api/news/news', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          page: this.page\n        })\n      });\n      const json = await response.json();\n      if (!json.length) this.havePosts = false;\n      let concatPosts = this.posts.concat(json);\n      this.posts = [...new Set(concatPosts.map(JSON.stringify))].map(JSON.parse);\n      this.page++;\n      this.load = false;\n    }\n  }\n\n}\n\nconst postsStore = new PostsStore();\nexport default postsStore;","map":null,"metadata":{},"sourceType":"module"}