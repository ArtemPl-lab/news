{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeAutoObservable } from \"mobx\";\nimport { getCookie } from 'react-use-cookie';\nimport { setCookie } from 'react-use-cookie';\n\nclass PostsStore {\n  constructor() {\n    _defineProperty(this, \"posts\", []);\n\n    _defineProperty(this, \"havePosts\", true);\n\n    _defineProperty(this, \"page\", 1);\n\n    _defineProperty(this, \"load\", false);\n\n    makeAutoObservable(this);\n  }\n\n  togleLike(post) {\n    this.posts = this.posts.map(postI => {\n      if (postI._id === post._id) {\n        postI.isLiked = !postI.isLiked;\n      }\n\n      return postI;\n    });\n  }\n\n  async loadPosts() {\n    if (!this.load && this.havePosts) {\n      this.load = true;\n      const response = await fetch('/api/news/news', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          page: this.page\n        })\n      });\n      let json = await response.json();\n\n      if (!json.length) {\n        this.havePosts = false;\n        this.load = false;\n        return 0;\n      }\n\n      ;\n      let cook = getCookie('likedPosts').split(',');\n      console.log(cook);\n      let likedPosts = new Set(cook);\n      console.log(likedPosts);\n      json = json.map(news => _objectSpread(_objectSpread({}, news), {}, {\n        isLiked: likedPosts.has(news._id)\n      }));\n      console.log(json);\n      let concatPosts = this.posts.concat(json);\n      this.posts = [...new Set(concatPosts.map(JSON.stringify))].map(JSON.parse);\n      this.page++;\n      this.load = false;\n    }\n  }\n\n}\n\nconst postsStore = new PostsStore();\nexport default postsStore;","map":null,"metadata":{},"sourceType":"module"}