{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Container } from \"@material-ui/core\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport { useEffect, useState } from \"react\";\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nconst columns = [{\n  field: 'id',\n  headerName: 'ID',\n  width: 130\n}, {\n  field: 'newsTitle',\n  headerName: 'Заголовок',\n  width: 200\n}, {\n  field: 'newsContent',\n  headerName: 'Контент',\n  width: 200\n}, {\n  field: 'added_at',\n  headerName: 'Дата создания/выгрузки',\n  width: 200\n}, {\n  field: 'resourceUrl',\n  headerName: 'Ресурс',\n  width: 300\n}];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'left',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(1.5)\n    }\n  }\n}));\n\nfunction CustomToolbar(props) {\n  const {\n    api\n  } = props;\n  console.log(api);\n  const classes = useStyles();\n\n  const handleDelete = async () => {\n    const posts = api.current.getSelectedRows();\n    posts.forEach(post => {\n      console.log(post.id);\n    });\n  };\n\n  const handleUnpin = async () => {\n    const posts = api.current.getSelectedRows(); // api.current.setRowModels();\n\n    posts.forEach(post => {\n      api.current.setRowModels(posts.filter(poste => poste.id !== post.id));\n      fetch('/api/news/pin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          id: post.id\n        })\n      });\n      console.log(post.id);\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsx(Chip, {\n      icon: /*#__PURE__*/_jsx(DeleteSweepIcon, {}),\n      label: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0432\\u044B\\u0431\\u0440\\u0430\\u043D\\u043D\\u044B\\u0435\",\n      clickable: true,\n      color: \"secondary\",\n      onClick: handleDelete\n    }), /*#__PURE__*/_jsx(Chip, {\n      icon: /*#__PURE__*/_jsx(HighlightOffIcon, {}),\n      label: \"\\u041E\\u0442\\u043A\\u0440\\u0435\\u043F\\u0438\\u0442\\u044C \\u0432\\u044B\\u0431\\u0440\\u0430\\u043D\\u043D\\u044B\\u0435\",\n      clickable: true,\n      color: \"primary\",\n      onClick: handleUnpin\n    })]\n  });\n}\n\nexport default (() => {\n  const {\n    0: rows,\n    1: setRows\n  } = useState([]);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState([]);\n  useEffect(async () => {\n    const res = await fetch('http://localhost:3000/api/news/pinned-news', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      }\n    });\n    let data = await res.json();\n    data = data.map(row => _objectSpread(_objectSpread({}, row), {}, {\n      id: row._id\n    }));\n    console.log(data);\n    setRows(rows => [...rows, ...data]);\n  }, []);\n\n  const onSelect = props => {\n    const {\n      rowIds\n    } = props;\n    setSelected(rowIds);\n  };\n\n  return /*#__PURE__*/_jsx(Container, {\n    maxWidth: \"xl\",\n    style: {\n      height: \"650px\",\n      marginTop: \"30px\"\n    },\n    children: /*#__PURE__*/_jsx(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 10,\n      checkboxSelection: true,\n      components: {\n        header: props => selected.length ? /*#__PURE__*/_jsx(CustomToolbar, _objectSpread({}, props)) : () => {}\n      },\n      onSelectionChange: onSelect\n    })\n  });\n});","map":null,"metadata":{},"sourceType":"module"}